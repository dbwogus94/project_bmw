version: '3'
services:
  redis:
    container_name: redis
    image: redis
    restart: always
    # 실행에 설정파일 주입
    command: redis-server --include /usr/local/etc/redis/redis.conf
    ports:
      - '6379:6379'
    volumes:
      - ./redis/data:/data/redis
      # https://redis.io/topics/config 에서 필요한 설정 버전 다운하여 적용
      # 필수 설정 1) requirepass, 2) bind
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    environment:
      - TZ=Asia/Seoul
    # networks:
    #   - backend

  # 서비스 - api server : ts + express
  api:
    container_name: api
    build:
      context: ./project_bmw_back
    ports:
      - '8080:8080'
    depends_on:
      - redis
    volumes:
      # (필수) 컨테이너에서 모듈과 빌드된 파일을 사용할 수 있도록 알려야함.
      - ./project_bmw_back:/usr/app
      - /usr/app/node_modules
      - /usr/app/dist
      - ./logs/api:/usr/app/logs
      # - ./logs/api:/root/.npm/_logs/
    environment:
      - TZ=Asia/Seoul
    stdin_open: true
    tty: true
    # 종속성 : client가 먼저 빌드되고 nginx가 빌드되도록 설정
    # networks:
    #   - backend

  # 서비스 - nginx + react
  web-client:
    container_name: web_client
    build:
      # client와 같은 이미지 사용
      context: ./project_bmw_front
    restart: always
    ports:
      - '80:80'
    volumes:
      # (필수) 로컬 설정파일 => nginx 설정파일에 마운트
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./logs/nginx:/var/log/nginx/
    environment:
      - TZ=Asia/Seoul
    stdin_open: true # docker run -i : Interactive 모드 사용으로 표준입출력 사용
    tty: true # docker run -t : 텍스트 기반의 터미널(TTY)을 애뮬레이션해주는 옵션

# volumes:
#   test_volume:

# networks:
#   backend:
#     driver: bridge
